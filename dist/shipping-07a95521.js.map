{"version":3,"file":"shipping-07a95521.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/common/form/withFormikExtended.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/AmazonPayShippingAddress.tsx","webpack://checkout/./packages/paypal-fastlane-integration/src/PayPalFastlaneShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/PayPalFastlaneShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx"],"sourcesContent":["import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nexport default function getShippingMethodId(checkout: Checkout, config: StoreConfig): string | undefined {\n    const SHIPPING_METHOD_IDS: string[] = [\n        PaymentMethodId.AmazonPay,\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout,\n    ];\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings?.providerWithCustomCheckout,\n    );\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    if (preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1) {\n        return preselectedPayment.providerId;\n    }\n\n    return providerWithCustomCheckout && SHIPPING_METHOD_IDS.indexOf(providerWithCustomCheckout) > -1\n        ? providerWithCustomCheckout\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    isFloatingLabelEnabled,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { getLanguageService } from '@bigcommerce/checkout/locale';\n\nimport { CustomError, setPrototypeOf } from '../../common/error';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect, AddressType } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        () => {\n            onUseNewAddress(id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                    type={AddressType.Shipping}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import { FormikProps, FormikValues, withFormik, WithFormikConfig } from 'formik';\nimport React, { ComponentType, useEffect, useRef } from 'react';\n\nexport interface WithFormikExtendedProps {\n    isInitialValueLoaded?: boolean;\n}\n\n/**\n * This HOC extends the behavior of the default `withFormik` HOC. It can reset a form to its initial state when\n * the `isInitialValueLoaded` prop is set to true. This is useful when a form needs to be rendered before its\n * initial value is fully loaded.\n */\nexport default function withFormikExtended<TOuterProps, TValues extends FormikValues, TPayload = TValues>(\n    config: WithFormikConfig<TOuterProps, TValues, TPayload>\n) {\n    return (OriginalComponent: ComponentType<TOuterProps & FormikProps<TValues>>) => {\n        const DecoratedComponent: ComponentType<TOuterProps & FormikProps<TValues> & WithFormikExtendedProps> = (props) => {\n            const { resetForm, isInitialValueLoaded } = props;\n            const previousIsInitialValueLoadedRef = useRef(isInitialValueLoaded);\n\n            useEffect(() => {\n                if (\n                    previousIsInitialValueLoadedRef.current === false && \n                    isInitialValueLoaded === true\n                ) {\n                    resetForm();\n                }\n\n                previousIsInitialValueLoadedRef.current = isInitialValueLoaded;\n            }, [isInitialValueLoaded]);\n\n            return <OriginalComponent {...props} />;\n        };\n\n        DecoratedComponent.displayName = `WithFormikExtended(${\n            OriginalComponent.displayName || OriginalComponent.name\n        })`;\n\n        return withFormik(config)(DecoratedComponent);\n    };\n}\n","import { ExtensionRegion, ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    isMultiShippingMode,\n    selectedShippingOptionId,\n    shippingOption,\n}) => {\n    const isSelected = selectedShippingOptionId === shippingOption.id;\n\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n                {(isSelected && !isMultiShippingMode) && (\n                    <Extension region={ExtensionRegion.ShippingSelectedShippingMethod} />\n                )}\n            </div>\n        ),\n        [isSelected, isMultiShippingMode, shippingOption],\n    );\n\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    isMultiShippingMode,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        isMultiShippingMode={isMultiShippingMode}\n                        key={shippingOption.id}\n                        selectedShippingOptionId={selectedShippingOptionId}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { AnalyticsContextProps } from '@bigcommerce/checkout/analytics';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { ChecklistSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { AddressType, StaticAddress } from '../../address';\nimport { withAnalytics } from '../../analytics';\nimport { withFormikExtended } from '../../common/form';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps & AnalyticsContextProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentDidUpdate(): void {\n        const {\n            analyticsTracker,\n            consignments,\n            shouldShowShippingOptions\n        } = this.props;\n\n        if (consignments?.length && shouldShowShippingOptions) {\n            analyticsTracker.showShippingMethods();\n        }\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId\n        } = this.props;\n\n        if (!consignments?.length || !shouldShowShippingOptions) {\n            return (\n                <ChecklistSkeleton\n                    additionalClassName=\"shippingOptions-skeleton\"\n                    isLoading={isLoading()}\n                    rows={2}\n                >\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </ChecklistSkeleton>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            isMultiShippingMode = {isMultiShippingMode}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <ChecklistSkeleton\n                                additionalClassName=\"shippingOptions-skeleton\"\n                                isLoading={isLoading(consignment.id)}\n                                rows={2}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </ChecklistSkeleton>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} type={AddressType.Shipping} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withAnalytics(withFormikExtended<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm));\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isInitialValueLoaded: boolean;\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout, config);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isInitialValueLoaded: boolean;\n    isLoading: boolean;\n}\n\nconst ShippingFormFooter: FunctionComponent<ShippingFormFooterProps> = ({\n    cartHasChanged,\n    isMultiShippingMode,\n    shouldShowOrderComments,\n    shouldShowShippingOptions = true,\n    shouldDisableSubmit,\n    isInitialValueLoaded,\n    isLoading,\n}) => {\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormAfter} />\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        {cartHasChanged && (\n                            <Alert type={AlertType.Error}>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert>\n                        )}\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isUpdatingAddress={isLoading}\n                    shouldShowShippingOptions={shouldShowShippingOptions}\n                />\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={shouldDisableSubmit}\n                    id=\"checkout-shipping-continue\"\n                    isLoading={isLoading}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default ShippingFormFooter;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { ErrorModal } from '../common/error';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\nimport { withFormikExtended } from '../common/form';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isInitialValueLoaded,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isInitialValueLoaded={isInitialValueLoaded}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (itemId: string, itemKey: string) => void = (\n        itemId,\n        itemKey,\n    ) => {\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormikExtended<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n            testId=\"billingSameAsShipping\"\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { StaticAddress } from '../address/';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import { Address, ShippingInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FC, useCallback } from 'react';\n\nimport { ShippingAddressProps } from './ShippingAddress';\nimport StaticAddressEditable from './StaticAddressEditable';\n\ninterface AmazonPayShippingAddressProps extends ShippingAddressProps {\n    shippingAddress:  Address,\n}\n\nexport const AmazonPayShippingAddress: FC<AmazonPayShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        onFieldChange,\n        initialize,\n        deinitialize,\n        shippingAddress,\n        isShippingStepPending,\n    } = props;\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const editAddressButtonId = 'edit-ship-button';\n\n    const options: ShippingInitializeOptions = {\n        amazonpay: {\n            editAddressButtonId,\n        },\n    };\n\n    return (\n        <StaticAddressEditable\n            address={shippingAddress}\n            buttonId={editAddressButtonId}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initializeShipping(options)}\n            isLoading={isShippingStepPending}\n            methodId={methodId}\n            onFieldChange={onFieldChange}\n        />\n    );\n};\n","import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { memo, useEffect, useRef } from 'react';\n\nimport { localizeAddress, TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    Button,\n    ButtonSize,\n    ButtonVariant,\n    DynamicFormField,\n    Fieldset,\n    LoadingOverlay,\n} from '@bigcommerce/checkout/ui';\n\nimport isPayPalCommerceFastlaneMethod from './is-paypal-commerce-fastlane-method';\nimport PoweredByPayPalFastlaneLabel from './PoweredByPayPalFastlaneLabel';\n\nexport interface PayPalFastlaneStaticAddressProps {\n    address: Address;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    countries?: Country[];\n}\n\nexport interface PayPalFastlaneAddressComponentRef {\n    showAddressSelector?: () => Promise<CustomerAddress | undefined>;\n}\n\nconst PayPalFastlaneShippingAddressForm = (props: PayPalFastlaneStaticAddressProps) => {\n    const {\n        address: addressWithoutLocalization,\n        methodId,\n        formFields,\n        isLoading,\n        initialize,\n        deinitialize,\n        onUnhandledError,\n        onFieldChange,\n        countries,\n    } = props;\n    const address = localizeAddress(addressWithoutLocalization, countries);\n\n    const paypalFastlaneShippingComponent = useRef<PayPalFastlaneAddressComponentRef>({});\n\n    const paypalCommerceFastlaneOptions = {\n        paypalcommercefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const braintreeFastlaneOptions = {\n        braintreefastlane: {\n            onPayPalFastlaneAddressChange: (\n                showPayPalFastlaneAddressSelector: PayPalFastlaneAddressComponentRef['showAddressSelector'],\n            ) => {\n                paypalFastlaneShippingComponent.current.showAddressSelector =\n                    showPayPalFastlaneAddressSelector;\n            },\n        },\n    };\n\n    const initializationOptions: ShippingInitializeOptions = isPayPalCommerceFastlaneMethod(\n        methodId,\n    )\n        ? paypalCommerceFastlaneOptions\n        : braintreeFastlaneOptions;\n\n    const initializeShippingStrategyOrThrow = async () => {\n        try {\n            await initialize({\n                methodId,\n                ...initializationOptions,\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeShippingStrategyOrThrow = async () => {\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeShippingStrategyOrThrow();\n\n        return () => {\n            void deinitializeShippingStrategyOrThrow();\n        };\n    }, []);\n\n    const customFormFields = formFields.filter(({ custom }) => custom);\n    const shouldShowCustomFormFields = customFormFields.length > 0;\n\n    const handleFieldValueChange: (name: string) => (value: string) => void = (name) => (value) =>\n        onFieldChange(name, value);\n\n    const handleEditButtonClick = async () => {\n        if (typeof paypalFastlaneShippingComponent.current.showAddressSelector === 'function') {\n            const selectedAddress =\n                await paypalFastlaneShippingComponent.current.showAddressSelector();\n\n            if (selectedAddress) {\n                props.onAddressSelect({\n                    ...selectedAddress,\n                    ...(shouldShowCustomFormFields ? address.customFields : {}),\n                });\n            }\n        }\n    };\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"stepHeader\" style={{ padding: 0 }}>\n                <div className=\"stepHeader-body subheader\">\n                    <div className=\"vcard checkout-address--static\">\n                        {(address.firstName || address.lastName) && (\n                            <p className=\"fn address-entry\">\n                                <span className=\"first-name\">{`${address.firstName} `}</span>\n                                <span className=\"family-name\">{address.lastName}</span>\n                            </p>\n                        )}\n\n                        {(address.phone || address.company) && (\n                            <p className=\"address-entry\">\n                                <span className=\"company-name\">{`${address.company} `}</span>\n                                <span className=\"tel\">{address.phone}</span>\n                            </p>\n                        )}\n\n                        <div className=\"adr\">\n                            <p className=\"street-address address-entry\">\n                                <span className=\"address-line-1\">{`${address.address1} `}</span>\n                                {address.address2 && (\n                                    <span className=\"address-line-2\">{` / ${address.address2}`}</span>\n                                )}\n                            </p>\n\n                            <p className=\"address-entry\">\n                                {address.city && (\n                                    <span className=\"locality\">{`${address.city}, `}</span>\n                                )}\n                                {address.localizedProvince && (\n                                    <span className=\"region\">{`${address.localizedProvince}, `}</span>\n                                )}\n                                {address.postalCode && (\n                                    <span className=\"postal-code\">{`${address.postalCode} / `}</span>\n                                )}\n                                {address.localizedCountry && (\n                                    <span className=\"country-name\">{`${address.localizedCountry} `}</span>\n                                )}\n                            </p>\n                        </div>\n                    </div>\n\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n\n                <div className=\"stepHeader-actions subheader\">\n                    <Button\n                        onClick={handleEditButtonClick}\n                        size={ButtonSize.Tiny}\n                        testId=\"step-edit-button\"\n                        variant={ButtonVariant.Secondary}\n                    >\n                        <TranslatedString id=\"common.edit_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            {shouldShowCustomFormFields && (\n                <Fieldset id=\"customFieldset\">\n                    {customFormFields.map((field) => (\n                        <DynamicFormField\n                            field={field}\n                            key={`${field.id}-${field.name}`}\n                            onChange={handleFieldValueChange(field.name)}\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))}\n                </Fieldset>\n            )}\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(PayPalFastlaneShippingAddressForm);\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport React, { FC } from 'react';\n\nimport { PayPalFastlaneShippingAddressForm } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport { ShippingAddressProps } from './ShippingAddress';\n\ninterface PayPalFastlaneShippingAddressProps extends ShippingAddressProps {\n    methodId: string,\n    shippingAddress:  Address,\n}\n\nexport const PayPalFastlaneShippingAddress: FC<PayPalFastlaneShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        onAddressSelect,\n        onFieldChange,\n        onUnhandledError,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n    } = props;\n\n    return (\n        <PayPalFastlaneShippingAddressForm\n            address={shippingAddress}\n            countries={countries}\n            deinitialize={deinitialize}\n            formFields={formFields}\n            initialize={initialize}\n            isLoading={isLoading}\n            methodId={methodId}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={onFieldChange}\n            onUnhandledError={onUnhandledError}\n        />\n    )\n};\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, AddressType, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            isFloatingLabelEnabled,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                                type={AddressType.Shipping}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useContext } from 'react';\n\nimport { isPayPalFastlaneMethod, usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { AmazonPayShippingAddress } from './AmazonPayShippingAddress';\nimport { PayPalFastlaneShippingAddress } from './PayPalFastlaneShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    isFloatingLabelEnabled?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isFloatingLabelEnabled,\n    } = props;\n\n    const { shouldShowPayPalFastlaneShippingForm } = usePayPalFastlaneAddress();\n    const { setSubmitted } = useContext(FormContext);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId === 'amazonpay' && shippingAddress) {\n        return (\n            <AmazonPayShippingAddress\n                {...props}\n                shippingAddress={shippingAddress}\n            />\n        );\n    }\n\n    if (methodId && isPayPalFastlaneMethod(methodId) && shippingAddress && shouldShowPayPalFastlaneShippingForm) {\n        return (\n            <PayPalFastlaneShippingAddress\n                { ...props }\n                methodId={methodId}\n                shippingAddress={shippingAddress}\n            />\n        )\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps } from 'formik';\nimport { debounce, isEqual, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { withFormikExtended } from '../common/form';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { PaymentMethodId } from '../payment/paymentMethod';\nimport { Fieldset, Form } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shippingAutosaveDelay?: number;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nfunction shouldHaveCustomValidation(methodId?: string): boolean {\n    const methodIdsWithoutCustomValidation: string[] = [\n        PaymentMethodId.BraintreeAcceleratedCheckout,\n        PaymentMethodId.PayPalCommerceAcceleratedCheckout\n    ];\n\n    return Boolean(methodId && !methodIdsWithoutCustomValidation.includes(methodId));\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            props.shippingAutosaveDelay ?? SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isInitialValueLoaded,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            isFloatingLabelEnabled,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isInitialValueLoaded={isInitialValueLoaded}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (Array.isArray(shippingAddress?.customFields)) {\n            includeShippingOptions = !isEqual(\n                shippingAddress?.customFields,\n                updatedShippingAddress?.customFields\n            ) || includeShippingOptions;\n        }\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormikExtended<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            shouldHaveCustomValidation(methodId)\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { useEffect } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    isInitialValueLoaded: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nconst ShippingForm = ({\n    addresses,\n    assignItem,\n    cart,\n    cartHasChanged,\n    createCustomerAddress,\n    consignments,\n    countries,\n    countriesWithAutocomplete,\n    onCreateAccount,\n    customerMessage,\n    deinitialize,\n    deleteConsignments,\n    getFields,\n    googleMapsApiKey,\n    initialize,\n    isBillingSameAsShipping,\n    isGuest,\n    isLoading,\n    isMultiShippingMode,\n    methodId,\n    onMultiShippingSubmit,\n    onSignIn,\n    onSingleShippingSubmit,\n    onUnhandledError,\n    onUseNewAddress,\n    shippingAddress,\n    shouldShowOrderComments,\n    shouldShowSaveAddress,\n    signOut,\n    updateAddress,\n    isShippingStepPending,\n    isFloatingLabelEnabled,\n    isInitialValueLoaded,\n}: ShippingFormProps & WithLanguageProps) => {\n    // TODO: remove PayPal Fastlane related code and useEffect when PayPal Fastlane will not be available for Store members\n    const {\n        isPayPalFastlaneEnabled,\n        paypalFastlaneAddresses,\n        shouldShowPayPalFastlaneShippingForm,\n    } = usePayPalFastlaneAddress();\n\n    const shippingAddresses = isPayPalFastlaneEnabled && isGuest\n        ? paypalFastlaneAddresses\n        : addresses;\n\n    useEffect(() => {\n        if (isPayPalFastlaneEnabled && !shouldShowPayPalFastlaneShippingForm) {\n            initialize({ methodId });\n        }\n    }, [isPayPalFastlaneEnabled, shouldShowPayPalFastlaneShippingForm, methodId, initialize]);\n\n    return isMultiShippingMode ? (\n        <MultiShippingForm\n            addresses={shippingAddresses}\n            assignItem={assignItem}\n            cart={cart}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            createCustomerAddress={createCustomerAddress}\n            customerMessage={customerMessage}\n            defaultCountryCode={shippingAddress?.countryCode}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isGuest={isGuest}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            onCreateAccount={onCreateAccount}\n            onSignIn={onSignIn}\n            onSubmit={onMultiShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n        />\n    ) : (\n        <SingleShippingForm\n            addresses={shippingAddresses}\n            cartHasChanged={cartHasChanged}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            customerMessage={customerMessage}\n            deinitialize={deinitialize}\n            deleteConsignments={deleteConsignments}\n            getFields={getFields}\n            googleMapsApiKey={googleMapsApiKey}\n            initialize={initialize}\n            isBillingSameAsShipping={isBillingSameAsShipping}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            isInitialValueLoaded={isInitialValueLoaded}\n            isLoading={isLoading}\n            isMultiShippingMode={isMultiShippingMode}\n            isShippingStepPending={isShippingStepPending}\n            methodId={methodId}\n            onSubmit={onSingleShippingSubmit}\n            onUnhandledError={onUnhandledError}\n            shippingAddress={shippingAddress}\n            shouldShowOrderComments={shouldShowOrderComments}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            signOut={signOut}\n            updateAddress={updateAddress}\n        />\n    );\n};\n\nexport default withLanguage(ShippingForm);\n","import { ExtensionRegion } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => {\n    return (\n        <>\n            <Extension region={ExtensionRegion.ShippingShippingAddressFormBefore} />\n            <div className=\"form-legend-container\">\n                <Legend testId=\"shipping-address-heading\">\n                    <TranslatedString\n                        id={\n                            isMultiShippingMode\n                                ? isGuest\n                                    ? 'shipping.multishipping_address_heading_guest'\n                                    : 'shipping.multishipping_address_heading'\n                                : 'shipping.shipping_address_heading'\n                        }\n                    />\n                </Legend>\n\n                {shouldShowMultiShipping && (\n                    <a\n                        data-test=\"shipping-mode-toggle\"\n                        href=\"#\"\n                        onClick={preventDefault(onMultiShippingChange)}\n                    >\n                        <TranslatedString\n                            id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                        />\n                    </a>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default memo(ShippingHeader);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\n// import { shouldUseStripeLinkByMinimumAmount } from '@bigcommerce/checkout/instrument-utils';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport getProviderWithCustomCheckout from '../payment/getProviderWithCustomCheckout';\n// import { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n// import StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    shouldRenderWhileLoading: boolean;\n    providerWithCustomCheckout?: string;\n    isFloatingLabelEnabled?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadBillingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    // shouldRenderStripeForm: boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadBillingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions(), loadBillingAddressFields()]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            step,\n            isFloatingLabelEnabled,\n            // shouldRenderStripeForm,\n            shouldRenderWhileLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        // if (shouldRenderStripeForm && !customer.email && this.props.countries.length > 0) {\n        //     return <StripeShipping\n        //         { ...shippingFormProps }\n        //         customer={ customer }\n        //         deinitialize={deinitializeShippingMethod}\n        //         initialize={initializeShippingMethod}\n        //         isBillingSameAsShipping={isBillingSameAsShipping}\n        //         isGuest={ isGuest }\n        //         isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n        //         isLoading={ isInitializing }\n        //         isMultiShippingMode={isMultiShippingMode}\n        //         isShippingMethodLoading={ this.props.isLoading }\n        //         onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n        //         onSubmit={this.handleSingleShippingSubmit}\n        //         shouldShowMultiShipping={ shouldShowMultiShipping }\n        //         step={step}\n        //         updateAddress={updateShippingAddress}\n        //     />;\n        // }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing} renderWhileLoading={shouldRenderWhileLoading}>\n                <div className=\"checkout-form\">\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                        isGuest={isGuest}\n                        isInitialValueLoaded={shouldRenderWhileLoading ? !isInitializing : true}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout, config);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    const providerWithCustomCheckout = getProviderWithCustomCheckout(\n        config.checkoutSettings.providerWithCustomCheckout,\n    );\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadBillingAddressFields: checkoutService.loadBillingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout,\n        shippingAddress,\n        shouldRenderWhileLoading: features['CHECKOUT-8300.improve_extension_performance'] ?? true,\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n        // shouldRenderStripeForm: providerWithCustomCheckout === PaymentMethodId.StripeUPE && shouldUseStripeLinkByMinimumAmount(cart),\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"names":["data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","config","SHIPPING_METHOD_IDS","PaymentMethodId","providerWithCustomCheckout","getProviderWithCustomCheckout","checkoutSettings","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","isFloatingLabelEnabled","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","memo","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","handleSelectAddress","address","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","AddressType","withFormikExtended","OriginalComponent","DecoratedComponent","props","resetForm","isInitialValueLoaded","previousIsInitialValueLoadedRef","useRef","useEffect","current","displayName","ShippingOptionListItem","consignmentId","isMultiShippingMode","selectedShippingOptionId","shippingOption","isSelected","renderLabel","StaticShippingOption","displayAdditionalInformation","method","Extension","region","ChecklistItem","htmlId","label","inputName","shippingOptions","onSelectedOption","handleSelect","length","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","availableShippingOptions","recommendedOption","getRecommendedShippingOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentDidUpdate","analyticsTracker","shouldShowShippingOptions","showShippingMethods","componentWillUnmount","render","invalidShippingMessage","methodId","renderConsignment","ChecklistSkeleton","additionalClassName","rows","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","withAnalytics","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","ShippingOptions","OrderComments","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","Error","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","testId","handleFieldValueChange","onFieldChange","initialize","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","field","DynamicFormField","parentFieldName","AmazonPayShippingAddress","isShippingStepPending","initializeShipping","defaultOptions","editAddressButtonId","amazonpay","addressWithoutLocalization","localizeAddress","paypalFastlaneShippingComponent","paypalCommerceFastlaneOptions","paypalcommercefastlane","onPayPalFastlaneAddressChange","showPayPalFastlaneAddressSelector","showAddressSelector","braintreeFastlaneOptions","braintreefastlane","initializationOptions","hideContentWhenLoading","localizedProvince","localizedCountry","PoweredByPayPalFastlaneLabel","onAddressSelect","PayPalFastlaneShippingAddress","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","connectFormik","ShippingAddressForm","hasRequestedShippingOptions","shouldShowPayPalFastlaneShippingForm","usePayPalFastlaneAddress","setSubmitted","useContext","FormContext","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","shippingAutosaveDelay","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","Array","isArray","isEqual","contextType","billingSameAsShipping","isInitialValid","isValidSync","methodIdsWithoutCustomValidation","Boolean","shouldHaveCustomValidation","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","signOut","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shippingAddresses","onMultiShippingChange","shouldShowMultiShipping","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadBillingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shouldRenderWhileLoading","shippingFormProps","AddressFormSkeleton","renderWhileLoading","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","Shipping"],"sourceRoot":""}